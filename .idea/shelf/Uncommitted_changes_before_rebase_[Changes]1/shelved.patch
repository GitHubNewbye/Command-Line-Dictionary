Index: dictionary.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>word,translation,examples\r\npajaro,bird,\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dictionary.csv b/dictionary.csv
--- a/dictionary.csv	(revision 31d67a1eb05d08b13e503b94e21d58d3c177815c)
+++ b/dictionary.csv	(date 1719298147357)
@@ -1,2 +1,8 @@
 word,translation,examples
 pajaro,bird,
+pajaro,bird,
+pajaro,bird,
+pajaro,bird,
+pajaro,bird,
+pajaro,bird,
+pajaro,bird,
Index: quiz.py
===================================================================
diff --git a/quiz.py b/quiz.py
deleted file mode 100644
--- a/quiz.py	(revision 31d67a1eb05d08b13e503b94e21d58d3c177815c)
+++ /dev/null	(revision 31d67a1eb05d08b13e503b94e21d58d3c177815c)
@@ -1,130 +0,0 @@
-import os.path
-
-from dictionary import Dictionary
-from random import choice, shuffle
-from termcolor import colored
-
-
-class Quiz(Dictionary):
-
-    def __init__(self):
-        super().__init__()
-        self.points = 0
-        self.__correct_answers = 0
-        self.__incorrect_answers = 0
-        self.__MINWORDSCOUNT = 6
-
-    def __are_enough_words(self):
-        return len(self.get_words()) >= self.__MINWORDSCOUNT
-
-    def __is_file(self):
-        return os.path.isfile('dictionary.csv')
-
-    def start(self):
-        if not self.__is_file():
-            print("Missing dictionary file")
-        elif not self.__are_enough_words():
-            print(f"There are not enough words to start the quiz. There must be at least {self.__MINWORDSCOUNT} words")
-        else:
-            print("Hi :) With quiz you can check your knowledge of words.\n"
-                  "It's also helpful to memorize the words if you forgot it.\n"
-                  "There is two modes: translation mode and match mode.\n"
-                  "In translation mode you will get a random word from dictionary and must to translate it.\n"
-                  "Every correct answer is 1 point, the wrong answer is 0 point.\n"
-                  "In match mode you need to match the words with their translations.\n"
-                  "Every correct answer is 1 point, the wrong answer is 0 point.\n"
-                  "Type finish when you want to finish the quiz.")
-
-            quiz_mode = input("Type 'translation' or 'match' to start the quiz: ").strip().lower()
-            if quiz_mode == 'translation':
-                self.translation_mode()
-            elif quiz_mode == 'match':
-                self.match_mode()
-            else:
-                print(colored("Invalid mode selected. Please try again.", "red"))
-
-    def translation_mode(self):
-        while True:
-            word = self.get_random_word()
-            word_translation = self.get_translation(word)['Translation']
-
-            user_answer = input(f"Type the translation of the word '{colored(word, attrs=['bold'], color='blue')}' "
-                                f"or '{colored('finish', 'red', attrs=['bold'])}' to exit the quiz: ").strip()
-
-            if user_answer.lower() == 'finish':
-                break
-            if user_answer == word_translation:
-                print(colored("Correct :)", "green"))
-                self.__correct_answers += 1
-            else:
-                print(colored("Incorrect :(", "red"))
-                self.__incorrect_answers += 1
-
-        self.points = self.__correct_answers
-        self.__display_results()
-
-    def match_mode(self):
-        print("""Type the first word's and the second word's numbers separated by space to match the words.
-Example: 1 7 """)
-
-        words = [el['word'] for el in self.get_words()]
-        translations = [self.get_translation(word)['Translation'] for word in words]
-
-        shuffled_words = words[:]
-        shuffled_translations = translations[:]
-        shuffle(shuffled_words)
-        shuffle(shuffled_translations)
-
-        answers = {'correct_answers': [], 'incorrect_answers': []}
-
-        for i in range(len(words)):
-            print(f"{i + 1}. {shuffled_words[i]}".ljust(20), f"{i + 1}. {shuffled_translations[i]}".ljust(20))
-
-        i = 1
-
-        while True:
-            user_input = input("Enter the nums of pairs or 'finish' to exit the quiz: ").strip()
-            if user_input.lower() == 'finish' or i == len(words):
-                break
-            try:
-                i += 1
-                word_num, translation_num = map(int, user_input.split())
-                if 1 <= word_num <= len(words) and 1 <= translation_num <= len(translations):
-                    word = shuffled_words[word_num - 1]
-                    translation = shuffled_translations[translation_num - 1]
-                    actual_translation = self.get_translation(word)['Translation']
-                    if actual_translation == translation:
-                        print(colored("Correct :)", "green"))
-                        self.__correct_answers += 1
-                        answers['correct_answers'].append(f"{word} - {translation}")
-                    else:
-                        print(colored("Incorrect :(", "red"))
-                        self.__incorrect_answers += 1
-                        answers['incorrect_answers'].append(f"{word} - {translation}")
-                else:
-                    print(colored("Invalid numbers. Please try again.", "red"))
-            except ValueError:
-                print(colored("Invalid input format. Please enter numbers separated by space.", "red"))
-
-        self.points = self.__correct_answers
-        self.__display_results(answers)
-
-    def get_random_word(self):
-        return choice(self.get_words())['word']
-
-    def __display_results(self, answers=None):
-        if answers is None:
-            answers = {'correct_answers': [], 'incorrect_answers': []}
-
-        print(f"You got {self.points} points")
-        print(colored(f"Correct answers: {self.__correct_answers}", "green", attrs=['bold']))
-
-        if answers['correct_answers']:
-            for correct_answer in answers['correct_answers']:
-                print(colored(correct_answer, "green"))
-
-        print(colored(f"Incorrect answers: {self.__incorrect_answers}", "red", attrs=['bold']))
-
-        if answers['incorrect_answers']:
-            for incorrect_answer in answers['incorrect_answers']:
-                print(colored(incorrect_answer, "red"))
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1719290631380)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1719290631380)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1719290631404)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1719290631404)
@@ -0,0 +1,12 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="int.get_refcount" />
+        </list>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/CS50_SimpleDict.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/CS50_SimpleDict.iml b/.idea/CS50_SimpleDict.iml
new file mode 100644
--- /dev/null	(date 1719290631392)
+++ b/.idea/CS50_SimpleDict.iml	(date 1719290631392)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1719290631428)
+++ b/.idea/modules.xml	(date 1719290631428)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/CS50_SimpleDict.iml" filepath="$PROJECT_DIR$/.idea/CS50_SimpleDict.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1719290631416)
+++ b/.idea/workspace.xml	(date 1719290631416)
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="660a386b-1662-4469-b0fe-0935d7cfd657" name="Changes" comment="Added add_word_command and remove_word_command&#10;Removed functions to get word and translations">
+      <change afterPath="$PROJECT_DIR$/.idea/CS50_SimpleDict.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project.py" beforeDir="false" afterPath="$PROJECT_DIR$/project.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "associatedIndex": 5
+}]]></component>
+  <component name="ProjectId" id="2i9WE2H6ZBgqF49qp3iqORPDJLO" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.project.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "master"
+  }
+}]]></component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-python-sdk-5b207ade9991-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.17890.14" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="660a386b-1662-4469-b0fe-0935d7cfd657" name="Changes" comment="" />
+      <created>1718903157380</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1718903157380</updated>
+    </task>
+    <task id="LOCAL-00001" summary="Started working on Dictionary class">
+      <option name="closed" value="true" />
+      <created>1718946250495</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1718946250495</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Implemented add_word, remove_word methods&#10;Implemented functions to get word and word translations from user">
+      <option name="closed" value="true" />
+      <created>1718948891077</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1718948891077</updated>
+    </task>
+    <task id="LOCAL-00003" summary="Implemented a function to get an example of word usage">
+      <option name="closed" value="true" />
+      <created>1718949486100</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1718949486100</updated>
+    </task>
+    <task id="LOCAL-00004" summary="Added add_word_command and remove_word_command&#10;Removed functions to get word and translations">
+      <option name="closed" value="true" />
+      <created>1718951145836</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1718951145836</updated>
+    </task>
+    <task id="LOCAL-00005" summary="Added add_word_command and remove_word_command&#10;Removed functions to get word and translations">
+      <option name="closed" value="true" />
+      <created>1718951551825</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1718951551825</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
+    <servers />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Started working on Dictionary class" />
+    <MESSAGE value="Implemented add_word, remove_word methods&#10;Implemented functions to get word and word translations from user" />
+    <MESSAGE value="Implemented a function to get an example of word usage" />
+    <MESSAGE value="Added add_word_command and remove_word_command&#10;Removed functions to get word and translations" />
+    <option name="LAST_COMMIT_MESSAGE" value="Added add_word_command and remove_word_command&#10;Removed functions to get word and translations" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1719290631452)
+++ b/.idea/misc.xml	(date 1719290631452)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.11 (CS50_SimpleDict)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (CS50_SimpleDict)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1719290631440)
+++ b/.idea/vcs.xml	(date 1719290631440)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
